// Generated by view binder compiler. Do not edit!
package com.frozo.ambientscribe.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.frozo.ambientscribe.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ViewAudioProcessingSettingsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView infoTextAudioProcessing;

  @NonNull
  public final Switch switchAutomaticGainControl;

  @NonNull
  public final Switch switchEchoCancellation;

  @NonNull
  public final Switch switchNoiseSuppression;

  @NonNull
  public final TextView titleAudioProcessingSettings;

  private ViewAudioProcessingSettingsBinding(@NonNull LinearLayout rootView,
      @NonNull TextView infoTextAudioProcessing, @NonNull Switch switchAutomaticGainControl,
      @NonNull Switch switchEchoCancellation, @NonNull Switch switchNoiseSuppression,
      @NonNull TextView titleAudioProcessingSettings) {
    this.rootView = rootView;
    this.infoTextAudioProcessing = infoTextAudioProcessing;
    this.switchAutomaticGainControl = switchAutomaticGainControl;
    this.switchEchoCancellation = switchEchoCancellation;
    this.switchNoiseSuppression = switchNoiseSuppression;
    this.titleAudioProcessingSettings = titleAudioProcessingSettings;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewAudioProcessingSettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewAudioProcessingSettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.view_audio_processing_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewAudioProcessingSettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.infoTextAudioProcessing;
      TextView infoTextAudioProcessing = ViewBindings.findChildViewById(rootView, id);
      if (infoTextAudioProcessing == null) {
        break missingId;
      }

      id = R.id.switchAutomaticGainControl;
      Switch switchAutomaticGainControl = ViewBindings.findChildViewById(rootView, id);
      if (switchAutomaticGainControl == null) {
        break missingId;
      }

      id = R.id.switchEchoCancellation;
      Switch switchEchoCancellation = ViewBindings.findChildViewById(rootView, id);
      if (switchEchoCancellation == null) {
        break missingId;
      }

      id = R.id.switchNoiseSuppression;
      Switch switchNoiseSuppression = ViewBindings.findChildViewById(rootView, id);
      if (switchNoiseSuppression == null) {
        break missingId;
      }

      id = R.id.titleAudioProcessingSettings;
      TextView titleAudioProcessingSettings = ViewBindings.findChildViewById(rootView, id);
      if (titleAudioProcessingSettings == null) {
        break missingId;
      }

      return new ViewAudioProcessingSettingsBinding((LinearLayout) rootView,
          infoTextAudioProcessing, switchAutomaticGainControl, switchEchoCancellation,
          switchNoiseSuppression, titleAudioProcessingSettings);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
