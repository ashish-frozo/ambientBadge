package com.frozo.ambientscribe.templates

import android.content.Context
import android.util.Log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.json.JSONObject
import java.io.File
import java.text.SimpleDateFormat
import java.util.*

/**
 * Medical Template Manager - ST-7.9
 * Manages clinic-approved HI AHS templates with legal disclaimer footer
 */
class MedicalTemplateManager(private val context: Context) {
    
    companion object {
        private const val TAG = "MedicalTemplateManager"
        private const val TEMPLATE_VERSION = "1.0.0"
        private const val LEGAL_DISCLAIMER = "This document is generated by Ambient Scribe and should be reviewed by a qualified healthcare professional before use."
    }

    /**
     * Medical template data class
     */
    data class MedicalTemplate(
        val id: String,
        val name: String,
        val language: String,
        val category: String,
        val content: String,
        val placeholders: List<String>,
        val legalDisclaimer: String,
        val version: String,
        val isApproved: Boolean,
        val clinicId: String?,
        val lastModified: Long
    )

    /**
     * Template placeholder
     */
    data class TemplatePlaceholder(
        val key: String,
        val description: String,
        val isRequired: Boolean,
        val dataType: String,
        val example: String
    )

    /**
     * Generated document
     */
    data class GeneratedDocument(
        val templateId: String,
        val content: String,
        val placeholders: Map<String, String>,
        val language: String,
        val timestamp: Long,
        val clinicId: String?,
        val patientId: String?,
        val encounterId: String?
    )

    /**
     * Template validation result
     */
    data class TemplateValidationResult(
        val templateId: String,
        val isValid: Boolean,
        val issues: List<String>,
        val recommendations: List<String>,
        val placeholderValidation: Map<String, Boolean>
    )

    private val templates = mutableMapOf<String, MedicalTemplate>()
    private val templateCategories = listOf(
        "Consultation",
        "Prescription",
        "Diagnosis",
        "Treatment Plan",
        "Follow-up",
        "Emergency",
        "Discharge Summary"
    )

    /**
     * Initialize medical template manager
     */
    suspend fun initialize(): Result<Unit> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "Initializing medical template manager")
            
            // Load default templates
            loadDefaultTemplates()
            
            // Load clinic-specific templates
            loadClinicTemplates()
            
            // Validate all templates
            validateAllTemplates()
            
            Log.d(TAG, "Medical template manager initialized with ${templates.size} templates")
            Result.success(Unit)

        } catch (e: Exception) {
            Log.e(TAG, "Failed to initialize medical template manager", e)
            Result.failure(e)
        }
    }

    /**
     * Load default templates
     */
    private fun loadDefaultTemplates() {
        try {
            // English templates
            loadEnglishTemplates()
            
            // Hindi templates
            loadHindiTemplates()
            
            // Telugu templates (if enabled)
            loadTeluguTemplates()
            
            Log.d(TAG, "Default templates loaded")
        } catch (e: Exception) {
            Log.e(TAG, "Failed to load default templates", e)
        }
    }

    /**
     * Load English templates
     */
    private fun loadEnglishTemplates() {
        val englishTemplates = listOf(
            MedicalTemplate(
                id = "consultation_en",
                name = "Consultation Note",
                language = "en",
                category = "Consultation",
                content = """
                    CONSULTATION NOTE
                    
                    Patient: {patient_name}
                    Date: {consultation_date}
                    Time: {consultation_time}
                    Doctor: {doctor_name}
                    
                    Chief Complaint:
                    {chief_complaint}
                    
                    History of Present Illness:
                    {history_present_illness}
                    
                    Physical Examination:
                    {physical_examination}
                    
                    Assessment and Plan:
                    {assessment_plan}
                    
                    Follow-up:
                    {follow_up}
                    
                    {legal_disclaimer}
                """.trimIndent(),
                placeholders = listOf(
                    "patient_name", "consultation_date", "consultation_time",
                    "doctor_name", "chief_complaint", "history_present_illness",
                    "physical_examination", "assessment_plan", "follow_up"
                ),
                legalDisclaimer = LEGAL_DISCLAIMER,
                version = TEMPLATE_VERSION,
                isApproved = true,
                clinicId = null,
                lastModified = System.currentTimeMillis()
            ),
            MedicalTemplate(
                id = "prescription_en",
                name = "Prescription",
                language = "en",
                category = "Prescription",
                content = """
                    PRESCRIPTION
                    
                    Patient: {patient_name}
                    Date: {prescription_date}
                    Doctor: {doctor_name}
                    License: {doctor_license}
                    
                    Medications:
                    {medications}
                    
                    Instructions:
                    {instructions}
                    
                    Follow-up:
                    {follow_up}
                    
                    {legal_disclaimer}
                """.trimIndent(),
                placeholders = listOf(
                    "patient_name", "prescription_date", "doctor_name",
                    "doctor_license", "medications", "instructions", "follow_up"
                ),
                legalDisclaimer = LEGAL_DISCLAIMER,
                version = TEMPLATE_VERSION,
                isApproved = true,
                clinicId = null,
                lastModified = System.currentTimeMillis()
            ),
            MedicalTemplate(
                id = "diagnosis_en",
                name = "Diagnosis Report",
                language = "en",
                category = "Diagnosis",
                content = """
                    DIAGNOSIS REPORT
                    
                    Patient: {patient_name}
                    Date: {diagnosis_date}
                    Doctor: {doctor_name}
                    
                    Symptoms:
                    {symptoms}
                    
                    Tests Performed:
                    {tests_performed}
                    
                    Diagnosis:
                    {diagnosis}
                    
                    Treatment Recommended:
                    {treatment_recommended}
                    
                    {legal_disclaimer}
                """.trimIndent(),
                placeholders = listOf(
                    "patient_name", "diagnosis_date", "doctor_name",
                    "symptoms", "tests_performed", "diagnosis", "treatment_recommended"
                ),
                legalDisclaimer = LEGAL_DISCLAIMER,
                version = TEMPLATE_VERSION,
                isApproved = true,
                clinicId = null,
                lastModified = System.currentTimeMillis()
            )
        )

        englishTemplates.forEach { template ->
            templates[template.id] = template
        }
    }

    /**
     * Load Hindi templates
     */
    private fun loadHindiTemplates() {
        val hindiTemplates = listOf(
            MedicalTemplate(
                id = "consultation_hi",
                name = "परामर्श नोट",
                language = "hi",
                category = "Consultation",
                content = """
                    परामर्श नोट
                    
                    रोगी: {patient_name}
                    तारीख: {consultation_date}
                    समय: {consultation_time}
                    डॉक्टर: {doctor_name}
                    
                    मुख्य शिकायत:
                    {chief_complaint}
                    
                    वर्तमान बीमारी का इतिहास:
                    {history_present_illness}
                    
                    शारीरिक परीक्षा:
                    {physical_examination}
                    
                    मूल्यांकन और योजना:
                    {assessment_plan}
                    
                    अनुवर्ती:
                    {follow_up}
                    
                    {legal_disclaimer}
                """.trimIndent(),
                placeholders = listOf(
                    "patient_name", "consultation_date", "consultation_time",
                    "doctor_name", "chief_complaint", "history_present_illness",
                    "physical_examination", "assessment_plan", "follow_up"
                ),
                legalDisclaimer = "यह दस्तावेज Ambient Scribe द्वारा उत्पन्न किया गया है और उपयोग से पहले एक योग्य स्वास्थ्य पेशेवर द्वारा समीक्षा की जानी चाहिए।",
                version = TEMPLATE_VERSION,
                isApproved = true,
                clinicId = null,
                lastModified = System.currentTimeMillis()
            ),
            MedicalTemplate(
                id = "prescription_hi",
                name = "नुस्खा",
                language = "hi",
                category = "Prescription",
                content = """
                    नुस्खा
                    
                    रोगी: {patient_name}
                    तारीख: {prescription_date}
                    डॉक्टर: {doctor_name}
                    लाइसेंस: {doctor_license}
                    
                    दवाएं:
                    {medications}
                    
                    निर्देश:
                    {instructions}
                    
                    अनुवर्ती:
                    {follow_up}
                    
                    {legal_disclaimer}
                """.trimIndent(),
                placeholders = listOf(
                    "patient_name", "prescription_date", "doctor_name",
                    "doctor_license", "medications", "instructions", "follow_up"
                ),
                legalDisclaimer = "यह दस्तावेज Ambient Scribe द्वारा उत्पन्न किया गया है और उपयोग से पहले एक योग्य स्वास्थ्य पेशेवर द्वारा समीक्षा की जानी चाहिए।",
                version = TEMPLATE_VERSION,
                isApproved = true,
                clinicId = null,
                lastModified = System.currentTimeMillis()
            )
        )

        hindiTemplates.forEach { template ->
            templates[template.id] = template
        }
    }

    /**
     * Load Telugu templates
     */
    private fun loadTeluguTemplates() {
        val teluguTemplates = listOf(
            MedicalTemplate(
                id = "consultation_te",
                name = "సలహా నోట్",
                language = "te",
                category = "Consultation",
                content = """
                    సలహా నోట్
                    
                    రోగి: {patient_name}
                    తేదీ: {consultation_date}
                    సమయం: {consultation_time}
                    డాక్టర్: {doctor_name}
                    
                    ప్రధాన ఫిర్యాదు:
                    {chief_complaint}
                    
                    ప్రస్తుత వ్యాధి చరిత్ర:
                    {history_present_illness}
                    
                    శారీరక పరీక్ష:
                    {physical_examination}
                    
                    అంచనా మరియు ప్రణాళిక:
                    {assessment_plan}
                    
                    అనుసరణ:
                    {follow_up}
                    
                    {legal_disclaimer}
                """.trimIndent(),
                placeholders = listOf(
                    "patient_name", "consultation_date", "consultation_time",
                    "doctor_name", "chief_complaint", "history_present_illness",
                    "physical_examination", "assessment_plan", "follow_up"
                ),
                legalDisclaimer = "ఈ పత్రం Ambient Scribe ద్వారా ఉత్పత్తి చేయబడింది మరియు ఉపయోగించే ముందు అర్హమైన ఆరోగ్య నిపుణులచే సమీక్షించబడాలి.",
                version = TEMPLATE_VERSION,
                isApproved = true,
                clinicId = null,
                lastModified = System.currentTimeMillis()
            )
        )

        teluguTemplates.forEach { template ->
            templates[template.id] = template
        }
    }

    /**
     * Load clinic-specific templates
     */
    private fun loadClinicTemplates() {
        try {
            // In a real implementation, this would load templates from clinic-specific files
            // For now, we'll simulate loading clinic templates
            
            val clinicTemplates = listOf(
                MedicalTemplate(
                    id = "clinic_consultation_en",
                    name = "Clinic Consultation Note",
                    language = "en",
                    category = "Consultation",
                    content = """
                        CLINIC CONSULTATION NOTE
                        
                        Patient: {patient_name}
                        Date: {consultation_date}
                        Doctor: {doctor_name}
                        Clinic: {clinic_name}
                        
                        Chief Complaint:
                        {chief_complaint}
                        
                        History:
                        {history}
                        
                        Examination:
                        {examination}
                        
                        Diagnosis:
                        {diagnosis}
                        
                        Treatment:
                        {treatment}
                        
                        {legal_disclaimer}
                    """.trimIndent(),
                    placeholders = listOf(
                        "patient_name", "consultation_date", "doctor_name",
                        "clinic_name", "chief_complaint", "history",
                        "examination", "diagnosis", "treatment"
                    ),
                    legalDisclaimer = LEGAL_DISCLAIMER,
                    version = TEMPLATE_VERSION,
                    isApproved = true,
                    clinicId = "clinic_001",
                    lastModified = System.currentTimeMillis()
                )
            )

            clinicTemplates.forEach { template ->
                templates[template.id] = template
            }
            
            Log.d(TAG, "Clinic templates loaded")
        } catch (e: Exception) {
            Log.e(TAG, "Failed to load clinic templates", e)
        }
    }

    /**
     * Get template by ID
     */
    fun getTemplate(templateId: String): MedicalTemplate? {
        return templates[templateId]
    }

    /**
     * Get templates by language
     */
    fun getTemplatesByLanguage(language: String): List<MedicalTemplate> {
        return templates.values.filter { it.language == language }
    }

    /**
     * Get templates by category
     */
    fun getTemplatesByCategory(category: String): List<MedicalTemplate> {
        return templates.values.filter { it.category == category }
    }

    /**
     * Get approved templates
     */
    fun getApprovedTemplates(): List<MedicalTemplate> {
        return templates.values.filter { it.isApproved }
    }

    /**
     * Generate document from template
     */
    suspend fun generateDocument(
        templateId: String,
        placeholders: Map<String, String>,
        clinicId: String? = null,
        patientId: String? = null,
        encounterId: String? = null
    ): Result<GeneratedDocument> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "Generating document from template: $templateId")
            
            val template = templates[templateId]
            if (template == null) {
                return@withContext Result.failure(IllegalArgumentException("Template not found: $templateId"))
            }
            
            if (!template!!.isApproved) {
                return@withContext Result.failure(IllegalStateException("Template not approved: $templateId"))
            }
            
            // Validate placeholders
            val validationResult = validatePlaceholders(template, placeholders)
            if (!validationResult.isValid) {
                return@withContext Result.failure(IllegalArgumentException("Invalid placeholders: ${validationResult.issues.joinToString(", ")}"))
            }
            
            // Generate document content
            var content = template!!.content
            placeholders.forEach { (key, value) ->
                content = content.replace("{$key}", value)
            }
            
            // Add legal disclaimer
            content = content.replace("{legal_disclaimer}", template.legalDisclaimer)
            
            val document = GeneratedDocument(
                templateId = templateId,
                content = content,
                placeholders = placeholders,
                language = template!!.language,
                timestamp = System.currentTimeMillis(),
                clinicId = clinicId,
                patientId = patientId,
                encounterId = encounterId
            )
            
            // Save generated document
            saveGeneratedDocument(document)
            
            Log.d(TAG, "Document generated successfully")
            Result.success(document)

        } catch (e: Exception) {
            Log.e(TAG, "Failed to generate document", e)
            Result.failure(e)
        }
    }

    /**
     * Validate placeholders
     */
    private fun validatePlaceholders(template: MedicalTemplate, placeholders: Map<String, String>): TemplateValidationResult {
        val issues = mutableListOf<String>()
        val recommendations = mutableListOf<String>()
        val placeholderValidation = mutableMapOf<String, Boolean>()
        
        // Check required placeholders
        template.placeholders.forEach { placeholder ->
            val isProvided = placeholders.containsKey(placeholder)
            placeholderValidation[placeholder] = isProvided
            
            if (!isProvided) {
                issues.add("Missing required placeholder: $placeholder")
                recommendations.add("Provide value for placeholder: $placeholder")
            }
        }
        
        // Check for extra placeholders
        placeholders.keys.forEach { key ->
            if (!template.placeholders.contains(key)) {
                issues.add("Unknown placeholder: $key")
                recommendations.add("Remove unknown placeholder: $key")
            }
        }
        
        return TemplateValidationResult(
            templateId = template.id,
            isValid = issues.isEmpty(),
            issues = issues,
            recommendations = recommendations,
            placeholderValidation = placeholderValidation
        )
    }

    /**
     * Validate all templates
     */
    private fun validateAllTemplates() {
        try {
            Log.d(TAG, "Validating all templates")
            
            templates.values.forEach { template ->
                val validationResult = validateTemplate(template)
                if (!validationResult.isValid) {
                    Log.w(TAG, "Template validation failed: ${template.id}, Issues: ${validationResult.issues.joinToString(", ")}")
                }
            }
            
            Log.d(TAG, "Template validation completed")
        } catch (e: Exception) {
            Log.e(TAG, "Failed to validate templates", e)
        }
    }

    /**
     * Validate individual template
     */
    private fun validateTemplate(template: MedicalTemplate): TemplateValidationResult {
        val issues = mutableListOf<String>()
        val recommendations = mutableListOf<String>()
        val placeholderValidation = mutableMapOf<String, Boolean>()
        
        // Check template content
        if (template.content.isEmpty()) {
            issues.add("Template content is empty")
            recommendations.add("Add content to template")
        }
        
        // Check placeholders in content
        template.placeholders.forEach { placeholder ->
            val isInContent = template.content.contains("{$placeholder}")
            placeholderValidation[placeholder] = isInContent
            
            if (!isInContent) {
                issues.add("Placeholder $placeholder not found in content")
                recommendations.add("Add placeholder $placeholder to template content")
            }
        }
        
        // Check legal disclaimer
        if (!template.content.contains("{legal_disclaimer}")) {
            issues.add("Legal disclaimer placeholder not found")
            recommendations.add("Add legal disclaimer placeholder to template")
        }
        
        return TemplateValidationResult(
            templateId = template.id,
            isValid = issues.isEmpty(),
            issues = issues,
            recommendations = recommendations,
            placeholderValidation = placeholderValidation
        )
    }

    /**
     * Save generated document
     */
    private fun saveGeneratedDocument(document: GeneratedDocument) {
        try {
            val documentsDir = File(context.filesDir, "generated_documents")
            documentsDir.mkdirs()
            
            val documentFile = File(documentsDir, "document_${document.timestamp}.json")
            val json = JSONObject().apply {
                put("templateId", document.templateId)
                put("content", document.content)
                put("placeholders", JSONObject(document.placeholders))
                put("language", document.language)
                put("timestamp", document.timestamp)
                put("clinicId", document.clinicId)
                put("patientId", document.patientId)
                put("encounterId", document.encounterId)
            }
            
            documentFile.writeText(json.toString())
            Log.d(TAG, "Generated document saved to: ${documentFile.absolutePath}")
            
        } catch (e: Exception) {
            Log.e(TAG, "Failed to save generated document", e)
        }
    }

    /**
     * Get template placeholders
     */
    fun getTemplatePlaceholders(templateId: String): List<TemplatePlaceholder> {
        val template = templates[templateId] ?: return emptyList()
        
        return template.placeholders.map { placeholder ->
            TemplatePlaceholder(
                key = placeholder,
                description = getPlaceholderDescription(placeholder),
                isRequired = true,
                dataType = getPlaceholderDataType(placeholder),
                example = getPlaceholderExample(placeholder)
            )
        }
    }

    /**
     * Get placeholder description
     */
    private fun getPlaceholderDescription(placeholder: String): String {
        return when (placeholder) {
            "patient_name" -> "Patient's full name"
            "consultation_date" -> "Date of consultation"
            "consultation_time" -> "Time of consultation"
            "doctor_name" -> "Doctor's full name"
            "chief_complaint" -> "Patient's chief complaint"
            "history_present_illness" -> "History of present illness"
            "physical_examination" -> "Physical examination findings"
            "assessment_plan" -> "Assessment and plan"
            "follow_up" -> "Follow-up instructions"
            "medications" -> "Prescribed medications"
            "instructions" -> "Medication instructions"
            "symptoms" -> "Patient symptoms"
            "tests_performed" -> "Tests performed"
            "diagnosis" -> "Diagnosis"
            "treatment_recommended" -> "Recommended treatment"
            "clinic_name" -> "Clinic name"
            "doctor_license" -> "Doctor's license number"
            else -> "Template placeholder"
        }
    }

    /**
     * Get placeholder data type
     */
    private fun getPlaceholderDataType(placeholder: String): String {
        return when (placeholder) {
            "consultation_date", "prescription_date", "diagnosis_date" -> "date"
            "consultation_time" -> "time"
            "patient_name", "doctor_name", "clinic_name" -> "text"
            "chief_complaint", "history_present_illness", "physical_examination",
            "assessment_plan", "follow_up", "medications", "instructions",
            "symptoms", "tests_performed", "diagnosis", "treatment_recommended" -> "text"
            "doctor_license" -> "text"
            else -> "text"
        }
    }

    /**
     * Get placeholder example
     */
    private fun getPlaceholderExample(placeholder: String): String {
        return when (placeholder) {
            "patient_name" -> "John Doe"
            "consultation_date" -> "2024-01-15"
            "consultation_time" -> "10:30 AM"
            "doctor_name" -> "Dr. Smith"
            "chief_complaint" -> "Chest pain"
            "history_present_illness" -> "Patient reports chest pain for 2 days"
            "physical_examination" -> "Vital signs stable, chest clear"
            "assessment_plan" -> "Possible angina, recommend ECG"
            "follow_up" -> "Follow up in 1 week"
            "medications" -> "Aspirin 81mg daily"
            "instructions" -> "Take with food"
            "symptoms" -> "Chest pain, shortness of breath"
            "tests_performed" -> "ECG, Chest X-ray"
            "diagnosis" -> "Angina"
            "treatment_recommended" -> "Medication and lifestyle changes"
            "clinic_name" -> "City Medical Center"
            "doctor_license" -> "MD123456"
            else -> "Example value"
        }
    }

    /**
     * Get template statistics
     */
    suspend fun getTemplateStatistics(): Map<String, Any> = withContext(Dispatchers.IO) {
        val totalTemplates = templates.size
        val approvedTemplates = templates.values.count { it.isApproved }
        val languages = templates.values.map { it.language }.distinct()
        val categories = templates.values.map { it.category }.distinct()
        val clinicTemplates = templates.values.count { it.clinicId != null }
        
        mapOf(
            "totalTemplates" to totalTemplates,
            "approvedTemplates" to approvedTemplates,
            "languages" to languages,
            "categories" to categories,
            "clinicTemplates" to clinicTemplates,
            "templateVersion" to TEMPLATE_VERSION
        )
    }
}
