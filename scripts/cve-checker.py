#!/usr/bin/env python3
"""
CVE Checker - Analyzes Trivy scan results and blocks on High/Critical vulnerabilities
"""

import json
import sys
import argparse
from typing import Dict, List, Any

class CVEChecker:
    def __init__(self):
        self.high_critical_vulns = []
        self.blocking_severities = ['HIGH', 'CRITICAL']
        
    def load_trivy_report(self, report_file: str) -> Dict[str, Any]:
        """Load Trivy JSON report"""
        try:
            with open(report_file, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"❌ Report file not found: {report_file}")
            sys.exit(1)
        except json.JSONDecodeError as e:
            print(f"❌ Invalid JSON in report file: {e}")
            sys.exit(1)
    
    def analyze_vulnerabilities(self, report: Dict[str, Any]) -> None:
        """Analyze vulnerabilities from Trivy report"""
        if 'Results' not in report:
            print("⚠️  No results found in Trivy report")
            return
            
        for result in report['Results']:
            if 'Vulnerabilities' not in result:
                continue
                
            target = result.get('Target', 'Unknown')
            class_type = result.get('Class', 'Unknown')
            
            for vuln in result['Vulnerabilities']:
                severity = vuln.get('Severity', 'UNKNOWN')
                vuln_id = vuln.get('VulnerabilityID', 'Unknown')
                pkg_name = vuln.get('PkgName', 'Unknown')
                pkg_version = vuln.get('InstalledVersion', 'Unknown')
                description = vuln.get('Description', 'No description')
                
                if severity in self.blocking_severities:
                    self.high_critical_vulns.append({
                        'target': target,
                        'class': class_type,
                        'severity': severity,
                        'vuln_id': vuln_id,
                        'package': pkg_name,
                        'version': pkg_version,
                        'description': description
                    })
    
    def print_vulnerabilities(self) -> None:
        """Print found vulnerabilities"""
        if not self.high_critical_vulns:
            print("✅ No High/Critical vulnerabilities found")
            return
            
        print(f"❌ Found {len(self.high_critical_vulns)} High/Critical vulnerabilities:")
        print("=" * 80)
        
        for i, vuln in enumerate(self.high_critical_vulns, 1):
            print(f"\n{i}. {vuln['severity']} - {vuln['vuln_id']}")
            print(f"   Target: {vuln['target']} ({vuln['class']})")
            print(f"   Package: {vuln['package']} {vuln['version']}")
            print(f"   Description: {vuln['description']}")
    
    def generate_summary(self) -> str:
        """Generate vulnerability summary"""
        if not self.high_critical_vulns:
            return "✅ No High/Critical vulnerabilities found"
            
        critical_count = sum(1 for v in self.high_critical_vulns if v['severity'] == 'CRITICAL')
        high_count = sum(1 for v in self.high_critical_vulns if v['severity'] == 'HIGH')
        
        summary = f"❌ Found {len(self.high_critical_vulns)} High/Critical vulnerabilities:\n"
        summary += f"   - Critical: {critical_count}\n"
        summary += f"   - High: {high_count}\n"
        summary += "\nPlease fix these vulnerabilities before merging."
        
        return summary
    
    def check_blocking_vulnerabilities(self) -> bool:
        """Check if there are blocking vulnerabilities"""
        return len(self.high_critical_vulns) > 0
    
    def run(self, report_file: str) -> int:
        """Run CVE checker"""
        print("🔍 Analyzing Trivy scan results...")
        print("=" * 50)
        
        report = self.load_trivy_report(report_file)
        self.analyze_vulnerabilities(report)
        self.print_vulnerabilities()
        
        summary = self.generate_summary()
        print(f"\n{summary}")
        
        if self.check_blocking_vulnerabilities():
            print("\n🚫 Build blocked due to High/Critical vulnerabilities")
            return 1
        else:
            print("\n✅ No blocking vulnerabilities found")
            return 0

def main():
    parser = argparse.ArgumentParser(description='CVE Checker - Check for High/Critical vulnerabilities')
    parser.add_argument('report_file', help='Trivy JSON report file')
    parser.add_argument('--severity', nargs='+', default=['HIGH', 'CRITICAL'], 
                       help='Blocking severity levels (default: HIGH CRITICAL)')
    
    args = parser.parse_args()
    
    checker = CVEChecker()
    checker.blocking_severities = args.severity
    exit_code = checker.run(args.report_file)
    sys.exit(exit_code)

if __name__ == '__main__':
    main()
